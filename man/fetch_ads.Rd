% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reclame.R
\name{fetch_ads}
\alias{fetch_ads}
\title{Fetch political advertising transparency data}
\usage{
fetch_ads(
  source = c("politiekereclame", "dpgmedia"),
  query = NULL,
  theme = NULL,
  country_code = "NL",
  period = c("PAST_7_DAYS", "PAST_30_DAYS", "PAST_YEAR"),
  channel = NULL,
  page = 1L,
  limit = 25L,
  all = FALSE,
  max_pages = 50L,
  sleep = 0.2,
  extra_params = NULL,
  headers = NULL,
  return = c("data", "list", "response"),
  verbose = FALSE
)
}
\arguments{
\item{source}{Character string: "politiekereclame" or "dpgmedia". Default: "politiekereclame".}

\item{query}{Character string for free-text search. Use \code{NULL} to omit.}

\item{theme}{Character string to filter by theme. Use \code{NULL} to omit.}

\item{country_code}{Character string for country code (DPG Media only). Default: "NL".}

\item{period}{Character string for time period (DPG Media only). Options: "PAST_7_DAYS",
"PAST_30_DAYS", "PAST_YEAR". Default: "PAST_7_DAYS".}

\item{channel}{Character string for channel type (DPG Media only). Options: "PRINT", "DIGITAL",
or \code{NULL} for all channels. Default: \code{NULL}.}

\item{page}{Integer page number (>= 1). Ignored when \code{all = TRUE}.}

\item{limit}{Integer number of results per page (1-1000).}

\item{all}{Logical. If \code{TRUE}, automatically fetches all pages.}

\item{max_pages}{Integer maximum pages to fetch when \code{all = TRUE}.}

\item{sleep}{Numeric seconds to pause between requests during auto-pagination.}

\item{extra_params}{Named list of additional query parameters.}

\item{headers}{Named list of HTTP headers to include.}

\item{return}{Character string: "data" (tibble), "list" (parsed JSON), or "response" (raw).}

\item{verbose}{Logical. Print progress during auto-pagination.}
}
\value{
Depends on \code{return} parameter:
\itemize{
\item \code{"data"} (default): A tibble with one row per statement
\item \code{"list"}: Parsed JSON as R list
\item \code{"response"}: Raw httr2 response object(s)
}
}
\description{
Retrieve political advertising transparency data from Dutch transparency APIs.
Supports both PolitiekeReclame.nl and DPG Media APIs with unified interface.
}
\details{
This function provides a unified interface to Dutch political advertising
transparency APIs. It automatically handles the differences between APIs
and provides consistent output formatting.
}
\examples{
\dontrun{
# PolitiekeReclame.nl API
fetch_ads(query = "election")
fetch_ads(theme = "Tweede Kamerverkiezingen 2025")
fetch_ads(query = "campaign", all = TRUE, verbose = TRUE)

# DPG Media API
fetch_ads(source = "dpgmedia", period = "PAST_30_DAYS")
fetch_ads(source = "dpgmedia", channel = "PRINT", period = "PAST_YEAR")
}

}
